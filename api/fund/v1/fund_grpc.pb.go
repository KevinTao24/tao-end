// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/fund/v1/fund.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Fund_CreateFund_FullMethodName = "/api.fund.v1.Fund/CreateFund"
	Fund_UpdateFund_FullMethodName = "/api.fund.v1.Fund/UpdateFund"
	Fund_DeleteFund_FullMethodName = "/api.fund.v1.Fund/DeleteFund"
	Fund_GetFund_FullMethodName    = "/api.fund.v1.Fund/GetFund"
	Fund_ListFund_FullMethodName   = "/api.fund.v1.Fund/ListFund"
)

// FundClient is the client API for Fund service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FundClient interface {
	CreateFund(ctx context.Context, in *CreateFundRequest, opts ...grpc.CallOption) (*CreateFundReply, error)
	UpdateFund(ctx context.Context, in *UpdateFundRequest, opts ...grpc.CallOption) (*UpdateFundReply, error)
	DeleteFund(ctx context.Context, in *DeleteFundRequest, opts ...grpc.CallOption) (*DeleteFundReply, error)
	GetFund(ctx context.Context, in *GetFundRequest, opts ...grpc.CallOption) (*GetFundReply, error)
	ListFund(ctx context.Context, in *ListFundRequest, opts ...grpc.CallOption) (*ListFundReply, error)
}

type fundClient struct {
	cc grpc.ClientConnInterface
}

func NewFundClient(cc grpc.ClientConnInterface) FundClient {
	return &fundClient{cc}
}

func (c *fundClient) CreateFund(ctx context.Context, in *CreateFundRequest, opts ...grpc.CallOption) (*CreateFundReply, error) {
	out := new(CreateFundReply)
	err := c.cc.Invoke(ctx, Fund_CreateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) UpdateFund(ctx context.Context, in *UpdateFundRequest, opts ...grpc.CallOption) (*UpdateFundReply, error) {
	out := new(UpdateFundReply)
	err := c.cc.Invoke(ctx, Fund_UpdateFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) DeleteFund(ctx context.Context, in *DeleteFundRequest, opts ...grpc.CallOption) (*DeleteFundReply, error) {
	out := new(DeleteFundReply)
	err := c.cc.Invoke(ctx, Fund_DeleteFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) GetFund(ctx context.Context, in *GetFundRequest, opts ...grpc.CallOption) (*GetFundReply, error) {
	out := new(GetFundReply)
	err := c.cc.Invoke(ctx, Fund_GetFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fundClient) ListFund(ctx context.Context, in *ListFundRequest, opts ...grpc.CallOption) (*ListFundReply, error) {
	out := new(ListFundReply)
	err := c.cc.Invoke(ctx, Fund_ListFund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FundServer is the server API for Fund service.
// All implementations must embed UnimplementedFundServer
// for forward compatibility
type FundServer interface {
	CreateFund(context.Context, *CreateFundRequest) (*CreateFundReply, error)
	UpdateFund(context.Context, *UpdateFundRequest) (*UpdateFundReply, error)
	DeleteFund(context.Context, *DeleteFundRequest) (*DeleteFundReply, error)
	GetFund(context.Context, *GetFundRequest) (*GetFundReply, error)
	ListFund(context.Context, *ListFundRequest) (*ListFundReply, error)
	mustEmbedUnimplementedFundServer()
}

// UnimplementedFundServer must be embedded to have forward compatible implementations.
type UnimplementedFundServer struct {
}

func (UnimplementedFundServer) CreateFund(context.Context, *CreateFundRequest) (*CreateFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFund not implemented")
}
func (UnimplementedFundServer) UpdateFund(context.Context, *UpdateFundRequest) (*UpdateFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFund not implemented")
}
func (UnimplementedFundServer) DeleteFund(context.Context, *DeleteFundRequest) (*DeleteFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFund not implemented")
}
func (UnimplementedFundServer) GetFund(context.Context, *GetFundRequest) (*GetFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFund not implemented")
}
func (UnimplementedFundServer) ListFund(context.Context, *ListFundRequest) (*ListFundReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFund not implemented")
}
func (UnimplementedFundServer) mustEmbedUnimplementedFundServer() {}

// UnsafeFundServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FundServer will
// result in compilation errors.
type UnsafeFundServer interface {
	mustEmbedUnimplementedFundServer()
}

func RegisterFundServer(s grpc.ServiceRegistrar, srv FundServer) {
	s.RegisterService(&Fund_ServiceDesc, srv)
}

func _Fund_CreateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).CreateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_CreateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).CreateFund(ctx, req.(*CreateFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_UpdateFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).UpdateFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_UpdateFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).UpdateFund(ctx, req.(*UpdateFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_DeleteFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).DeleteFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_DeleteFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).DeleteFund(ctx, req.(*DeleteFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_GetFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).GetFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_GetFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).GetFund(ctx, req.(*GetFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fund_ListFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FundServer).ListFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Fund_ListFund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FundServer).ListFund(ctx, req.(*ListFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Fund_ServiceDesc is the grpc.ServiceDesc for Fund service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Fund_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.fund.v1.Fund",
	HandlerType: (*FundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFund",
			Handler:    _Fund_CreateFund_Handler,
		},
		{
			MethodName: "UpdateFund",
			Handler:    _Fund_UpdateFund_Handler,
		},
		{
			MethodName: "DeleteFund",
			Handler:    _Fund_DeleteFund_Handler,
		},
		{
			MethodName: "GetFund",
			Handler:    _Fund_GetFund_Handler,
		},
		{
			MethodName: "ListFund",
			Handler:    _Fund_ListFund_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/fund/v1/fund.proto",
}
