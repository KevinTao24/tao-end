// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: api/llm/v1/llm.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Llm_CreateLlm_FullMethodName = "/api.llm.v1.Llm/CreateLlm"
	Llm_UpdateLlm_FullMethodName = "/api.llm.v1.Llm/UpdateLlm"
	Llm_DeleteLlm_FullMethodName = "/api.llm.v1.Llm/DeleteLlm"
	Llm_GetLlm_FullMethodName    = "/api.llm.v1.Llm/GetLlm"
	Llm_ListLlm_FullMethodName   = "/api.llm.v1.Llm/ListLlm"
)

// LlmClient is the client API for Llm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LlmClient interface {
	CreateLlm(ctx context.Context, in *CreateLlmRequest, opts ...grpc.CallOption) (*CreateLlmReply, error)
	UpdateLlm(ctx context.Context, in *UpdateLlmRequest, opts ...grpc.CallOption) (*UpdateLlmReply, error)
	DeleteLlm(ctx context.Context, in *DeleteLlmRequest, opts ...grpc.CallOption) (*DeleteLlmReply, error)
	GetLlm(ctx context.Context, in *GetLlmRequest, opts ...grpc.CallOption) (*GetLlmReply, error)
	ListLlm(ctx context.Context, in *ListLlmRequest, opts ...grpc.CallOption) (*ListLlmReply, error)
}

type llmClient struct {
	cc grpc.ClientConnInterface
}

func NewLlmClient(cc grpc.ClientConnInterface) LlmClient {
	return &llmClient{cc}
}

func (c *llmClient) CreateLlm(ctx context.Context, in *CreateLlmRequest, opts ...grpc.CallOption) (*CreateLlmReply, error) {
	out := new(CreateLlmReply)
	err := c.cc.Invoke(ctx, Llm_CreateLlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmClient) UpdateLlm(ctx context.Context, in *UpdateLlmRequest, opts ...grpc.CallOption) (*UpdateLlmReply, error) {
	out := new(UpdateLlmReply)
	err := c.cc.Invoke(ctx, Llm_UpdateLlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmClient) DeleteLlm(ctx context.Context, in *DeleteLlmRequest, opts ...grpc.CallOption) (*DeleteLlmReply, error) {
	out := new(DeleteLlmReply)
	err := c.cc.Invoke(ctx, Llm_DeleteLlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmClient) GetLlm(ctx context.Context, in *GetLlmRequest, opts ...grpc.CallOption) (*GetLlmReply, error) {
	out := new(GetLlmReply)
	err := c.cc.Invoke(ctx, Llm_GetLlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *llmClient) ListLlm(ctx context.Context, in *ListLlmRequest, opts ...grpc.CallOption) (*ListLlmReply, error) {
	out := new(ListLlmReply)
	err := c.cc.Invoke(ctx, Llm_ListLlm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LlmServer is the server API for Llm service.
// All implementations must embed UnimplementedLlmServer
// for forward compatibility
type LlmServer interface {
	CreateLlm(context.Context, *CreateLlmRequest) (*CreateLlmReply, error)
	UpdateLlm(context.Context, *UpdateLlmRequest) (*UpdateLlmReply, error)
	DeleteLlm(context.Context, *DeleteLlmRequest) (*DeleteLlmReply, error)
	GetLlm(context.Context, *GetLlmRequest) (*GetLlmReply, error)
	ListLlm(context.Context, *ListLlmRequest) (*ListLlmReply, error)
	mustEmbedUnimplementedLlmServer()
}

// UnimplementedLlmServer must be embedded to have forward compatible implementations.
type UnimplementedLlmServer struct {
}

func (UnimplementedLlmServer) CreateLlm(context.Context, *CreateLlmRequest) (*CreateLlmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLlm not implemented")
}
func (UnimplementedLlmServer) UpdateLlm(context.Context, *UpdateLlmRequest) (*UpdateLlmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLlm not implemented")
}
func (UnimplementedLlmServer) DeleteLlm(context.Context, *DeleteLlmRequest) (*DeleteLlmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLlm not implemented")
}
func (UnimplementedLlmServer) GetLlm(context.Context, *GetLlmRequest) (*GetLlmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLlm not implemented")
}
func (UnimplementedLlmServer) ListLlm(context.Context, *ListLlmRequest) (*ListLlmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLlm not implemented")
}
func (UnimplementedLlmServer) mustEmbedUnimplementedLlmServer() {}

// UnsafeLlmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LlmServer will
// result in compilation errors.
type UnsafeLlmServer interface {
	mustEmbedUnimplementedLlmServer()
}

func RegisterLlmServer(s grpc.ServiceRegistrar, srv LlmServer) {
	s.RegisterService(&Llm_ServiceDesc, srv)
}

func _Llm_CreateLlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServer).CreateLlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llm_CreateLlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServer).CreateLlm(ctx, req.(*CreateLlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llm_UpdateLlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServer).UpdateLlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llm_UpdateLlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServer).UpdateLlm(ctx, req.(*UpdateLlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llm_DeleteLlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServer).DeleteLlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llm_DeleteLlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServer).DeleteLlm(ctx, req.(*DeleteLlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llm_GetLlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServer).GetLlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llm_GetLlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServer).GetLlm(ctx, req.(*GetLlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Llm_ListLlm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLlmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LlmServer).ListLlm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Llm_ListLlm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LlmServer).ListLlm(ctx, req.(*ListLlmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Llm_ServiceDesc is the grpc.ServiceDesc for Llm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Llm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.llm.v1.Llm",
	HandlerType: (*LlmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLlm",
			Handler:    _Llm_CreateLlm_Handler,
		},
		{
			MethodName: "UpdateLlm",
			Handler:    _Llm_UpdateLlm_Handler,
		},
		{
			MethodName: "DeleteLlm",
			Handler:    _Llm_DeleteLlm_Handler,
		},
		{
			MethodName: "GetLlm",
			Handler:    _Llm_GetLlm_Handler,
		},
		{
			MethodName: "ListLlm",
			Handler:    _Llm_ListLlm_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/llm/v1/llm.proto",
}
